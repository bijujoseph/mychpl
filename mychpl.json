{
  "swagger": "2.0",
  "info": {
    "description": "Certified Health IT Product Listing",
    "version": "8.1.0",
    "title": "CHPL",
    "termsOfService": "http://terms/of/service.url",
    "contact": {
      "name": "CHPL@ainq.com"
    },
    "license": {
      "name": "License Text",
      "url": "https://github.com/chpladmin/chpl-api/blob/staging/LICENSE"
    }
  },
  "host": "chpl.healthit.gov",
  "basePath": "/rest",
  "tags": [
    {
      "name": "product-controller",
      "description": "Product Controller"
    },
    {
      "name": "api-key-controller",
      "description": "Api Key Controller"
    },
    {
      "name": "authentication-controller",
      "description": "Authentication Controller"
    },
    {
      "name": "search-view-controller",
      "description": "Search View Controller"
    },
    {
      "name": "activity-controller",
      "description": "Activity Controller"
    },
    {
      "name": "certification-body-controller",
      "description": "Certification Body Controller"
    },
    {
      "name": "developer-controller",
      "description": "Developer Controller"
    },
    {
      "name": "testing-lab-controller",
      "description": "Testing Lab Controller"
    },
    {
      "name": "certification-id-controller",
      "description": "Certification Id Controller"
    },
    {
      "name": "user-management-controller",
      "description": "User Management Controller"
    },
    {
      "name": "corrective-action-plan-controller",
      "description": "Corrective Action Plan Controller"
    },
    {
      "name": "product-version-controller",
      "description": "Product Version Controller"
    },
    {
      "name": "announcement-controller",
      "description": "Announcement Controller"
    },
    {
      "name": "certified-product-controller",
      "description": "Certified Product Controller"
    },
    {
      "name": "surveillance-controller",
      "description": "Surveillance Controller"
    }
  ],
  "paths": {
    "/acbs/": {
      "get": {
        "tags": [
          "certification-body-controller"
        ],
        "summary": "List all certification bodies (ACBs).",
        "description": "Setting the 'editable' parameter to true will return all ACBs that the logged in user has edit permissions on.Setting 'showDeleted' to true will include even those ACBs that have been deleted. The logged in user must have ROLE_ADMIN to see deleted ACBs. The default behavior of this service is to list all of the ACBs in the system that are not deleted.",
        "operationId": "getAcbsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "editable",
            "in": "query",
            "description": "editable",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "showDeleted",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificationBodyResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/acbs/add_user": {
      "post": {
        "tags": [
          "certification-body-controller"
        ],
        "summary": "Add a user to an ACB.",
        "description": "The logged in user must have ROLE_ADMIN or ROLE_ACB_ADMIN and have administrative authority on the  specified ACB. It is recommended to pass 'ADMIN' in as the 'authority' field to guarantee maximum compatibility although 'READ' and 'DELETE' are also valid choices.  Note that this method gives special permission on a specific ACB and is not the  equivalent of assigning the ROLE_ACB_ADMIN role. Please view /users/grant_role  request for more information on that.",
        "operationId": "addUserToAcbUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "updateRequest",
            "description": "updateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserAndAcbRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/acbs/create": {
      "post": {
        "tags": [
          "certification-body-controller"
        ],
        "summary": "Create a new ACB.",
        "description": "The logged in user must have ROLE_ADMIN to create a new ACB.",
        "operationId": "createAcbUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "acbInfo",
            "description": "acbInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificationBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificationBody"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/acbs/update": {
      "post": {
        "tags": [
          "certification-body-controller"
        ],
        "summary": "Update an existing ACB.",
        "description": "The logged in user must either have ROLE_ADMIN or have ROLE_ACB_ADMIN  to update an existing ACB.",
        "operationId": "updateAcbUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "acbInfo",
            "description": "acbInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificationBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificationBody"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/acbs/{acbId}": {
      "get": {
        "tags": [
          "certification-body-controller"
        ],
        "summary": "Get details about a specific certification body (ACB).",
        "description": "The logged in user must either have ROLE_ADMIN or have ROLE_ACB_ADMIN or ROLE_ACB_STAFF  for the ACB with the provided ID.",
        "operationId": "getAcbByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "acbId",
            "in": "path",
            "description": "acbId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificationBody"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/acbs/{acbId}/delete": {
      "post": {
        "tags": [
          "certification-body-controller"
        ],
        "summary": "Delete an ACB.",
        "description": "The logged in user must have ROLE_ADMIN.",
        "operationId": "deleteAcbUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "acbId",
            "in": "path",
            "description": "acbId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/acbs/{acbId}/remove_user/{userId}": {
      "post": {
        "tags": [
          "certification-body-controller"
        ],
        "summary": "Remove user permissions from an ACB.",
        "description": "The logged in user must have ROLE_ADMIN or ROLE_ACB_ADMIN and have administrative authority on the  specified ACB. The user specified in the request will have all authorities  removed that are associated with the specified ACB.",
        "operationId": "deleteUserFromAcbUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "acbId",
            "in": "path",
            "description": "acbId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/acbs/{acbId}/undelete": {
      "post": {
        "tags": [
          "certification-body-controller"
        ],
        "summary": "Restore a deleted ACB.",
        "description": "ACBs are unique in the CHPL in that they can be restored after a delete. The logged in user must have ROLE_ADMIN.",
        "operationId": "undeleteAcbUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "acbId",
            "in": "path",
            "description": "acbId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/acbs/{acbId}/users": {
      "get": {
        "tags": [
          "certification-body-controller"
        ],
        "summary": "List users with permissions on a specified ACB.",
        "description": "The logged in user must have ROLE_ADMIN or have administrative or read authority on the  specified ACB.",
        "operationId": "getUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "acbId",
            "in": "path",
            "description": "acbId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PermittedUserResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/acbs": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for certification bodies.",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. Only users calling this API with ROLE_ADMIN may set the 'showDeleted' flag to true. Those users are allowed to see activity for all certification bodies including that have been deleted. The default behavior is to show all activity for non-deleted ACBs.",
        "operationId": "activityForACBsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "showDeleted",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/acbs/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for a specific certification body.",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. Only users calling this API with ROLE_ADMIN may set the 'showDeleted' flag to true and should do so if the certification body specified in the path has been deleted. ",
        "operationId": "activityForACBByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "showDeleted",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/announcements": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for all announcements",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return announcement activity across all dates.",
        "operationId": "activityForAnnoucementsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/announcements/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for a specific announcement",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return all activity for the specified announcement across all dates.",
        "operationId": "activityForAnnouncementByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/api_keys": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for all API keys",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return API key activity across all dates.",
        "operationId": "activityForApiKeysUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/atls": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for testing labs.",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. Only users calling this API with ROLE_ADMIN may set the 'showDeleted' flag to true. Those users are allowed to see activity for all testing labs including that have been deleted. The default behavior is to show all activity for non-deleted ATLs.",
        "operationId": "activityforATLsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "showDeleted",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/atls/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for a specific testing lab.",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. Only users calling this API with ROLE_ADMIN may set the 'showDeleted' flag to true and should do so if the testing lab specified in the path has been deleted. ",
        "operationId": "activityForATLByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "showDeleted",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/certifications": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for all certifications",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for all certifications across all dates.",
        "operationId": "activityForCertificationsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/certifications/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for a specific certification",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for the specified certification across all dates.",
        "operationId": "activityForCertificationByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/certified_products": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for certified products",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return certified product activity across all dates.",
        "operationId": "activityForCertifiedProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/certified_products/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for a specific certified product",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for the specified certified product across all dates.",
        "operationId": "activityForCertifiedProductByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/developers": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data about all developers",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return the all developer activity across all dates.",
        "operationId": "activityForDevelopersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/developers/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for a specific developer",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for the specified developer across all dates.",
        "operationId": "activityForDevelopersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/pending_certified_products": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for all pending certified products",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for all pending certified products across all dates.",
        "operationId": "activityForPendingCertifiedProductsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/pending_certified_products/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for a specific pending certified product",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for the specified pending certified product across all dates.",
        "operationId": "activityForPendingCertifiedProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/products": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for all products",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for all products across all dates.",
        "operationId": "activityForProductsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/products/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for a specific product",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for the specified product across all dates.",
        "operationId": "activityForProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/user_activities": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Track the actions of all users in the system",
        "description": "The authenticated user calling this method must have ROLE_ADMIN. Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return the all user activity across all dates.",
        "operationId": "activityByUserUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserActivity"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/user_activities/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Track the actions of a specific user in the system",
        "description": "The authenticated user calling this method must have ROLE_ADMIN. Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return the specified user's activity across all dates.",
        "operationId": "activityByUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/users": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data about all CHPL user accounts",
        "description": "API users can optionally specify to only get activity a certain number of days into the past with the 'lastNDays' parameter. The default behavior is to return activity for all CHPL user across all dates.",
        "operationId": "activityForUsersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/users/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data about a specific CHPL user account",
        "description": "API users can optionally specify to only get activity a certain number of days into the past with the 'lastNDays' parameter. The default behavior is to return activity for the specified CHPL user across all dates.",
        "operationId": "activityForUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/versions": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for all versions",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for all versions across all dates.",
        "operationId": "activityForVersionsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/activity/versions/{id}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get auditable data for a specific version",
        "description": "Users can optionally specify 'start' and 'end' parameters to restrict the date range of the results. The default behavior is to return activity for the specified version across all dates.",
        "operationId": "activityForVersionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/announcements/": {
      "get": {
        "tags": [
          "announcement-controller"
        ],
        "summary": "Get all announcements.",
        "description": "The announcement listing is open to anyone, however announcements may be both public and private and  only public announcements will be returned if a non-authenticated user calls this method.  Both public and private announcements will be returned to an authenticated user. Scheduled future announcements can be retrieved by setting the 'future' flag to true  and only CHPL users with ROLE_ADMIN will be granted access to that data.",
        "operationId": "getAnnouncementsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "future",
            "in": "query",
            "description": "future",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AnnouncementResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/announcements/create": {
      "post": {
        "tags": [
          "announcement-controller"
        ],
        "summary": "Create a new announcement.",
        "description": "Only CHPL users with ROLE_ADMIN are able to create announcements.",
        "operationId": "createAnnouncementUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "announcementInfo",
            "description": "announcementInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/announcements/update": {
      "post": {
        "tags": [
          "announcement-controller"
        ],
        "summary": "Change an existing announcement.",
        "description": "Only CHPL users with ROLE_ADMIN are able to update announcements.",
        "operationId": "updateAnnouncementUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "announcementInfo",
            "description": "announcementInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/announcements/{announcementId}": {
      "get": {
        "tags": [
          "announcement-controller"
        ],
        "summary": "Get a specific announcement.",
        "operationId": "getAnnouncementByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "description": "announcementId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/announcements/{announcementId}/delete": {
      "post": {
        "tags": [
          "announcement-controller"
        ],
        "summary": "Delete an existing announcement.",
        "description": "Only CHPL users with ROLE_ADMIN are able to delete announcements.",
        "operationId": "deleteAnnouncementUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "description": "announcementId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/atls/": {
      "get": {
        "tags": [
          "testing-lab-controller"
        ],
        "summary": "List all testing labs (ATLs).",
        "description": "Setting the 'editable' parameter to true will return all ATLs that the logged in user has edit permissions on.Setting 'showDeleted' to true will include even those ATLs that have been deleted. The logged in user must have ROLE_ADMIN to see deleted ATLs. The default behavior of this service is to list all of the ATLs in the system that are not deleted.",
        "operationId": "getAtlsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "editable",
            "in": "query",
            "description": "editable",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "showDeleted",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TestingLabResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/atls/add_user": {
      "post": {
        "tags": [
          "testing-lab-controller"
        ],
        "summary": "Add a user to an ATL.",
        "description": "The logged in user must have ROLE_ADMIN or ROLE_ATL_ADMIN and have administrative authority on the  specified ATL. It is recommended to pass 'ADMIN' in as the 'authority' field to guarantee maximum compatibility although 'READ' and 'DELETE' are also valid choices.  Note that this method gives special permission on a specific ATL and is not the  equivalent of assigning the ROLE_ATL_ADMIN role. Please view /users/grant_role  request for more information on that.",
        "operationId": "addUserToAtlUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "updateRequest",
            "description": "updateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserAndAtlRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/atls/create": {
      "post": {
        "tags": [
          "testing-lab-controller"
        ],
        "summary": "Create a new testing lab.",
        "description": "The logged in user must have ROLE_ADMIN to create a new testing lab.",
        "operationId": "createUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "atlInfo",
            "description": "atlInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestingLab"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TestingLab"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/atls/update": {
      "post": {
        "tags": [
          "testing-lab-controller"
        ],
        "summary": "Update an existing ATL.",
        "description": "The logged in user must either have ROLE_ADMIN or have administrative authority on the testing lab whose data is being updated.",
        "operationId": "updateUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "atlInfo",
            "description": "atlInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestingLab"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TestingLab"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/atls/{atlId}": {
      "get": {
        "tags": [
          "testing-lab-controller"
        ],
        "summary": "Get details about a specific testing lab (ATL).",
        "description": "The logged in user must have ROLE_ADMIN or have either read oradministrative authority on the testing lab with the ID specified.",
        "operationId": "getAtlByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "atlId",
            "in": "path",
            "description": "atlId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TestingLab"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/atls/{atlId}/delete": {
      "post": {
        "tags": [
          "testing-lab-controller"
        ],
        "summary": "Delete an ATL.",
        "description": "The logged in user must have ROLE_ADMIN.",
        "operationId": "deleteAtlUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "atlId",
            "in": "path",
            "description": "atlId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/atls/{atlId}/remove_user/{userId}": {
      "post": {
        "tags": [
          "testing-lab-controller"
        ],
        "summary": "Remove user permissions from an ATL.",
        "description": "The logged in user must have ROLE_ADMIN or ROLE_ATL_ADMIN and have administrative authority on the  specified ATL. The user specified in the request will have all authorities  removed that are associated with the specified ATL.",
        "operationId": "deleteUserFromAtlUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "atlId",
            "in": "path",
            "description": "atlId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/atls/{atlId}/undelete": {
      "post": {
        "tags": [
          "testing-lab-controller"
        ],
        "summary": "Restore a deleted ATL.",
        "description": "ATLs are unique in the CHPL in that they can be restored after a delete. The logged in user must have ROLE_ADMIN.",
        "operationId": "undeleteAtlUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "atlId",
            "in": "path",
            "description": "atlId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/atls/{atlId}/users": {
      "get": {
        "tags": [
          "testing-lab-controller"
        ],
        "summary": "List users with permissions on a specified ATL.",
        "description": "The logged in user must have ROLE_ADMIN or have administrative or read authority on the  specified ATL.",
        "operationId": "getUsersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "atlId",
            "in": "path",
            "description": "atlId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PermittedUserResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/auth/authenticate": {
      "post": {
        "tags": [
          "authentication-controller"
        ],
        "summary": "Log in.",
        "description": "Call this method to authenticate a user. The value returned is that user's token which must be passed on all subsequent requests in the Authorization header. Specifically, the Authorization header must have a value of 'Bearer token-that-gets-returned'.",
        "operationId": "authenticateJSONUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "description": "credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/auth/change_password": {
      "post": {
        "tags": [
          "authentication-controller"
        ],
        "summary": "Change password.",
        "description": "Change the logged in user's password as long as the old password passed in matches what is stored in the database.",
        "operationId": "changePasswordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/auth/reset_password": {
      "post": {
        "tags": [
          "authentication-controller"
        ],
        "summary": "Reset a user's password.",
        "description": "This service generates a new password, saves it to the user's account  and sends an email to the address associated with the user's account  containing the new password.",
        "operationId": "resetPasswordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userInfo",
            "description": "userInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserResetPasswordJSONObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certification_ids/": {
      "get": {
        "tags": [
          "certification-id-controller"
        ],
        "summary": "Retrieves a list of all CMS EHR Certification IDs along with the date they were created.",
        "operationId": "getAllUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SimpleCertificationId"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certification_ids/create": {
      "post": {
        "tags": [
          "certification-id-controller"
        ],
        "summary": "Creates a new CMS EHR Certification ID for a collection of products if one does not already exist.",
        "description": "Retrieves a CMS EHR Certification ID for a collection of products or creates a new one if one does not already exist. Returns a list of basic product information, Criteria and CQM calculations, and the associated CMS EHR Certification ID if one exists.",
        "operationId": "createCertificationIdUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ids",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificationIdResults"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certification_ids/search": {
      "get": {
        "tags": [
          "certification-id-controller"
        ],
        "summary": "Retrieves a CMS EHR Certification ID for a collection of products.",
        "description": "Retrieves a CMS EHR Certification ID for a collection of products. Returns a list of basic product information, Criteria and CQM calculations, and the associated CMS EHR Certification ID if one exists.",
        "operationId": "searchCertificationIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ids",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificationIdResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certification_ids/verify": {
      "get": {
        "tags": [
          "certification-id-controller"
        ],
        "summary": "Verify whether one or more specific EHR Certification IDs are valid or not.",
        "description": "Returns true or false for each EHR Certification ID specified.",
        "operationId": "verifyCertificationIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ids",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificationIdVerifyResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "certification-id-controller"
        ],
        "summary": "Verify whether one or more specific EHR Certification IDs are valid or not.",
        "description": "Returns a boolean value for each EHR Certification ID specified.",
        "operationId": "verifyCertificationIdUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificationIdVerificationBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificationIdVerifyResults"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certification_ids/{certificationId}": {
      "get": {
        "tags": [
          "certification-id-controller"
        ],
        "summary": "Get information about a specific EHR Certification ID.",
        "description": "Retrieves detailed information about a specific EHR Certification ID including the list of products that make it up.",
        "operationId": "getCertificationIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "certificationId",
            "in": "path",
            "description": "certificationId",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeCriteria",
            "in": "query",
            "description": "includeCriteria",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeCqms",
            "in": "query",
            "description": "includeCqms",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificationIdLookupResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_product_details": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all data about a certified product.",
        "operationId": "getCertifiedProductDetailsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "productId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertifiedProductSearchDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_products": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get basic data about all certified products in the system.",
        "operationId": "getAllCertifiedProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BasicSearchResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_products/": {
      "get": {
        "tags": [
          "certified-product-controller"
        ],
        "summary": "List all certified products",
        "description": "Default behavior is to return all certified products in the system.  The optional 'versionId' parameter filters the certified products to those assigned to that version. The 'editable' parameter will return only those certified products that the logged in user has permission to edit as  determined by ACB roles and authorities. Not all information about  every certified product is returned. Call the /details service for more information.",
        "operationId": "getCertifiedProductsByVersionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "query",
            "description": "versionId",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "editable",
            "in": "query",
            "description": "editable",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CertifiedProduct"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_products/meaningful_use_users/upload": {
      "post": {
        "tags": [
          "certified-product-controller"
        ],
        "summary": "DEPRECATED. Upload a file to update the number of meaningful use users for each CHPL Product Number",
        "description": "Accepts a CSV file with chpl_product_number and num_meaningful_use_users to update the number of meaningful use users for each CHPL Product Number. The user uploading the file must have ROLE_ADMIN or ROLE_ONC_STAFF ",
        "operationId": "uploadMeaningfulUseUsersUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MeaningfulUseUserResults"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/certified_products/pending": {
      "get": {
        "tags": [
          "certified-product-controller"
        ],
        "summary": "List pending certified products.",
        "description": "Pending certified products are created via CSV file upload and are left in the 'pending' state  until validated and approved by an appropriate ACB administrator.",
        "operationId": "getPendingCertifiedProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PendingCertifiedProductResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_products/pending/confirm": {
      "post": {
        "tags": [
          "certified-product-controller"
        ],
        "summary": "Confirm a pending certified product.",
        "description": "Creates a new certified product in the system based on all of the information  passed in on the request. This information may differ from what was previously  entered for the pending certified product during upload. It will first be validated  to check for errors, then a new certified product is created, and the old pending certified product will be removed. ROLE_ACB_ADMIN or ROLE_ACB_STAFF  and administrative authority on the ACB is required.",
        "operationId": "confirmPendingCertifiedProductUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pendingCp",
            "description": "pendingCp",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PendingCertifiedProductDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertifiedProductSearchDetails"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_products/pending/{pcpId}": {
      "get": {
        "tags": [
          "certified-product-controller"
        ],
        "summary": "List a specific pending certified product.",
        "operationId": "getPendingCertifiedProductByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "pcpId",
            "in": "path",
            "description": "pcpId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PendingCertifiedProductDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_products/pending/{pcpId}/reject": {
      "post": {
        "tags": [
          "certified-product-controller"
        ],
        "summary": "Reject a pending certified product.",
        "description": "Essentially deletes a pending certified product. ROLE_ACB_ADMIN, ROLE_ACB_STAFF  and administrative authority on the ACB is required.",
        "operationId": "rejectPendingCertifiedProductsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "pcpId",
            "in": "path",
            "description": "pcpId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_products/update": {
      "post": {
        "tags": [
          "certified-product-controller"
        ],
        "summary": "Update an existing certified product.",
        "description": "Updates the certified product after first validating the request. The logged in user must have ROLE_ADMIN or ROLE_ACB_ADMIN and have administrative  authority on the ACB that certified the product. If a different ACB is passed in as part of the request, an ownership change will take place and the logged in  user must have ROLE_ADMIN.",
        "operationId": "updateCertifiedProductUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "updateRequest",
            "description": "updateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertifiedProductSearchDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertifiedProductSearchDetails"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_products/upload": {
      "post": {
        "tags": [
          "certified-product-controller"
        ],
        "summary": "Upload a file with certified products",
        "description": "Accepts a CSV file with very specific fields to create pending certified products.  The user uploading the file must have ROLE_ACB_ADMIN or ROLE_ACB_STAFF  and administrative authority on the ACB(s) specified in the file.",
        "operationId": "uploadUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PendingCertifiedProductResults"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/certified_products/{certifiedProductId}/details": {
      "get": {
        "tags": [
          "certified-product-controller"
        ],
        "summary": "Get all details for a specified certified product.",
        "description": "Returns all information in the CHPL related to the specified certified product.",
        "operationId": "getCertifiedProductByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "certifiedProductId",
            "in": "path",
            "description": "certifiedProductId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertifiedProductSearchDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/corrective_action_plan/": {
      "get": {
        "tags": [
          "corrective-action-plan-controller"
        ],
        "summary": "DEPRECATED. Use surveillance API methods.<br/>List corrective action plans for a certified product.",
        "description": "List all corrective action plans, both open and resolved, for a certified product.",
        "operationId": "getCorrectiveActionPlansForCertifiedProductUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "certifiedProductId",
            "in": "query",
            "description": "certifiedProductId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CorrectiveActionPlanResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/corrective_action_plan/create": {
      "post": {
        "tags": [
          "corrective-action-plan-controller"
        ],
        "summary": "DEPRECATED. Use surveillance API methods. <br/>Create a new corrective action plan.",
        "description": "The logged in user must have either ROLE_ADMIN or ROLE_ACB_ADMIN and administrative  authority on the associated ACB.",
        "operationId": "createUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createRequest",
            "description": "createRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorrectiveActionPlanDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CorrectiveActionPlanDetails"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/corrective_action_plan/documentation/{capDocId}": {
      "get": {
        "tags": [
          "corrective-action-plan-controller"
        ],
        "summary": "DEPRECATED. Use surveillance API methods.<br/> Download CAP supporting documentation.",
        "description": "Download a specific file that was previously uploaded to a corrective action plan.",
        "operationId": "getCorrectiveActionPlanDocumentationByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "capDocId",
            "in": "path",
            "description": "capDocId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/corrective_action_plan/documentation/{docId}/delete": {
      "post": {
        "tags": [
          "corrective-action-plan-controller"
        ],
        "summary": "DEPRECATED. Use surveillance API methods.<br/>Remove documentation from a corrective action plan.",
        "description": "The logged in user must have either ROLE_ADMIN or ROLE_ACB_ADMIN and administrative  authority on the associated ACB.",
        "operationId": "deleteDocumentationByIdUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "docId",
            "in": "path",
            "description": "docId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/corrective_action_plan/update": {
      "post": {
        "tags": [
          "corrective-action-plan-controller"
        ],
        "summary": "DEPRECATED. Use surveillance API methods.<br/>Update a corrective action plan.",
        "description": "The logged in user must have ROLE_ADMIN or ROLE_ACB_ADMIN and administrative authority on the ACB associated with the corrective action plan.",
        "operationId": "updateUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "updateRequest",
            "description": "updateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorrectiveActionPlanDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CorrectiveActionPlanDetails"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/corrective_action_plan/{capId}": {
      "get": {
        "tags": [
          "corrective-action-plan-controller"
        ],
        "summary": "DEPRECATED. Use surveillance API methods.<br/> Get corrective action plan details.",
        "description": "Get all of the information about a specific corrective action plan. These details  include the presence and associated id's of any uploaded supporting  documentation but not the contents of those documents. Use /documentation/{capDocId} to  view the files.",
        "operationId": "getCorrectiveActionPlanByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "capId",
            "in": "path",
            "description": "capId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CorrectiveActionPlanDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/corrective_action_plan/{capId}/documentation": {
      "post": {
        "tags": [
          "corrective-action-plan-controller"
        ],
        "summary": "DEPRECATED. Use surveillance API methods.<br/>Add documentation to an existing CAP.",
        "description": "Upload a file of any kind (current size limit 5MB) as supporting  documentation to an existing CAP. The logged in user uploading the file  must have either ROLE_ADMIN or ROLE_ACB_ADMIN and administrative  authority on the associated ACB.",
        "operationId": "uploadUsingPOST_1",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "capId",
            "in": "path",
            "description": "capId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/corrective_action_plan/{planId}/delete": {
      "post": {
        "tags": [
          "corrective-action-plan-controller"
        ],
        "summary": "DEPRECATED. Use surveillance API methods.<br/>Delete a corrective action plan.",
        "description": "The logged in user must have either ROLE_ADMIN or ROLE_ACB_ADMIN and administrative  authority on the associated ACB.",
        "operationId": "deleteAcbUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "planId",
            "in": "path",
            "description": "planId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/data/accessibility_standards": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible accessibility standard options in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getAccessibilityStandardsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/age_ranges": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible test participant age ranges in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getAgeRangesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/certification_bodies": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible ACBs in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getCertBodyNamesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyValueModel"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/certification_editions": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible certificaiton editions in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getEditionNamesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyValueModel"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/certification_statuses": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible certification statuses in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getCertificationStatusesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyValueModel"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/classification_types": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible classifications in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getClassificationNamesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyValueModel"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/developer_statuses": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible developer status options in the CHPL",
        "operationId": "getDeveloperStatusesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/developers": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible developer names in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getDeveloperNamesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyValueModelStatuses"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/education_types": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible education types in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getEducationTypesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/macra_measures": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible macra measure options in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getMacraMeasuresUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/nonconformity_status_types": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible nonconformity status type options in the CHPL",
        "operationId": "getNonconformityStatusTypesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/nonconformity_types": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible nonconformity type options in the CHPL",
        "operationId": "getNonconformityTypeOptionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/practice_types": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible practice types in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getPracticeTypeNamesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyValueModel"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/products": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible product names in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getProductNamesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyValueModelStatuses"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/qms_standards": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible qms standard options in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getQmsStandardsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/search_options": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all search options in the CHPL",
        "description": "This returns all of the other /data/{something} results in one single response.",
        "operationId": "getPopulateSearchDataUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "simple",
            "in": "query",
            "description": "simple",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PopulateSearchOptions"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/surveillance_requirement_types": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible surveillance requirement type options in the CHPL",
        "operationId": "getSurveillanceRequirementTypesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/surveillance_requirements": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible surveillance requirement options in the CHPL",
        "operationId": "getSurveillanceRequirementOptionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveillanceRequirementOptions"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/surveillance_result_types": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible surveillance result type options in the CHPL",
        "operationId": "getSurveillanceResultTypesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/surveillance_types": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible surveillance type options in the CHPL",
        "operationId": "getSurveillanceTypesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/targeted_users": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible targeted user options in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getTargetedUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/test_functionality": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible test functionality options in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getTestFunctionalityUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/test_standards": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible test standard options in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getTestStandardsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/test_tools": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible test tool options in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getTestToolsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/data/ucd_processes": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all possible UCD process options in the CHPL",
        "description": "This is useful for knowing what values one might possibly search for.",
        "operationId": "getUcdProcessesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchOption"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/decertifications/certified_products": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all decertified certified products in the CHPL",
        "description": "Returns all decertified certified products, their decertified statuses, and the total count of decertified certified products as the recordCount.",
        "operationId": "getDecertifiedCertifiedProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDescending",
            "in": "query",
            "description": "sortDescending",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/decertifications/developers": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get all developer decertifications in the CHPL",
        "description": "This returns all decertified developers.",
        "operationId": "getDecertifiedDevelopersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DecertifiedDeveloperResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/decertifications/inactive_certificates": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Get decertified certified products in the CHPL with inactive certificates",
        "description": "Returns only decertified certified products with inactive certificates. Includes their decertified statuses and the total count of decertified certified products as the recordCount.",
        "operationId": "getDecertifiedInactiveCertificateCertifiedProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDescending",
            "in": "query",
            "description": "sortDescending",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/developers/": {
      "get": {
        "tags": [
          "developer-controller"
        ],
        "summary": "List all developers in the system.",
        "operationId": "getDevelopersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "showDeleted",
            "in": "query",
            "description": "showDeleted",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeveloperResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/developers/update": {
      "post": {
        "tags": [
          "developer-controller"
        ],
        "summary": "Update a developer or merge developers.",
        "description": "This method serves two purposes: to update a single developer's information and to merge two developers into one.  A user of this service should pass in a single developerId to update just that developer.  If multiple developer IDs are passed in, the service performs a merge meaning that a new developer  is created with all of the information provided (name, address, etc.) and all of the prodcuts  previously assigned to the developerId's specified are reassigned to the newly created developer. The  old developers are then deleted.  The logged in user must have ROLE_ADMIN, ROLE_ACB_ADMIN, or ROLE_ACB_STAFF. ",
        "operationId": "updateDeveloperUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "developerInfo",
            "description": "developerInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDevelopersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Developer"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/developers/{developerId}": {
      "get": {
        "tags": [
          "developer-controller"
        ],
        "summary": "Get information about a specific developer.",
        "operationId": "getDeveloperByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "developerId",
            "in": "path",
            "description": "developerId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Developer"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/download": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Download the entire CHPL as XML.",
        "description": "Once per day, the entire certified product listing is written out to an XML file on the CHPL servers. This method allows any user to download that XML file. It is formatted in such a way that users may import it into Microsoft Excel or any other XML tool of their choosing.",
        "operationId": "downloadUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "edition",
            "in": "query",
            "description": "edition",
            "required": false,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "format",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/key/": {
      "get": {
        "tags": [
          "api-key-controller"
        ],
        "summary": "List all API keys that have been created.",
        "description": "This service is only available to CHPL users with ROLE_ADMIN.",
        "operationId": "listKeysUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiKey"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/key/activity": {
      "post": {
        "tags": [
          "api-key-controller"
        ],
        "summary": "View the calls made per API key.",
        "description": "This service is only available to CHPL users with ROLE_ADMIN.",
        "operationId": "listActivityUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateAscending",
            "in": "query",
            "description": "dateAscending",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiKeyActivity"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/key/activity/{apiKey}": {
      "post": {
        "tags": [
          "api-key-controller"
        ],
        "summary": "View the calls made by a specific API key.",
        "description": "This service is only available to CHPL users with ROLE_ADMIN.",
        "operationId": "listActivityByKeyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "description": "apiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiKeyActivity"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/key/register": {
      "post": {
        "tags": [
          "api-key-controller"
        ],
        "summary": "Sign up for a new API key.",
        "description": "Anyone wishing to access the methods listed in this API must have an API key. This service  will auto-generate a key and send it to the supplied email address. It must be included  in subsequent API calls via either a header with the name 'API-Key' or as a URL parameter named 'api_key'.",
        "operationId": "registerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "registration",
            "description": "registration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKeyRegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/key/revoke": {
      "post": {
        "tags": [
          "api-key-controller"
        ],
        "summary": "Remove an API key.",
        "description": "This service is only available to CHPL users with ROLE_ADMIN.",
        "operationId": "revokeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "key",
            "description": "key",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          {
            "name": "API-Key",
            "in": "header",
            "description": "API-Key",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "apiKey",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products/": {
      "get": {
        "tags": [
          "product-controller"
        ],
        "summary": "List all products",
        "description": "Either list all products or optionally just all products belonging to a specific developer.",
        "operationId": "getAllProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "developerId",
            "in": "query",
            "description": "developerId",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products/update": {
      "post": {
        "tags": [
          "product-controller"
        ],
        "summary": "Update a product or merge products.",
        "description": "This method serves two purposes: to update a single product's information and to merge two products into one.  A user of this service should pass in a single productId to update just that product.  If multiple product IDs are passed in, the service performs a merge meaning that a new product  is created with all of the information provided and all of the versions  previously assigned to the productIds specified are reassigned to the newly created product. The  old products are then deleted.  The logged in user must have ROLE_ADMIN, ROLE_ACB_ADMIN, or ROLE_ACB_STAFF. ",
        "operationId": "updateProductUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "productInfo",
            "description": "productInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProductsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "product-controller"
        ],
        "summary": "Get information about a specific product.",
        "operationId": "getProductByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Search the CHPL",
        "description": "If paging parameters are not specified, the first 20 records are returned by default.",
        "operationId": "simpleSearchUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "searchTerm",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDescending",
            "in": "query",
            "description": "sortDescending",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "search-view-controller"
        ],
        "summary": "Advanced search for the CHPL",
        "description": "Search the CHPL by specifycing multiple fields of the data to search. If paging fields are not specified, the first 20 records are returned by default.",
        "operationId": "advancedSearchUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "searchFilters",
            "description": "searchFilters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/create": {
      "post": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Create a new surveillance activity for a certified product.",
        "description": "Creates a new surveillance activity, surveilled requirements, and any applicable non-conformities in the system and associates them with the certified product indicated in the request body. The surveillance passed into this request will first be validated  to check for errors. ROLE_ACB_ADMIN or ROLE_ACB_STAFF  and administrative authority on the ACB associated with the certified product is required.",
        "operationId": "createSurveillanceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "survToInsert",
            "description": "survToInsert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Surveillance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Surveillance"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/document/{documentId}": {
      "get": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Download nonconformity supporting documentation.",
        "description": "Download a specific file that was previously uploaded to a surveillance nonconformity.",
        "operationId": "streamDocumentContentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "documentId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/download": {
      "get": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Download surveillance as CSV.",
        "description": "Once per day, all surveillance and nonconformities are written out to CSV files on the CHPL servers. This method allows any user to download those files.",
        "operationId": "downloadUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/csv"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/pending": {
      "get": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Get the listing of all pending surveillance items that this user has access to.",
        "operationId": "getAllPendingSurveillanceForAcbUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveillanceResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/pending/confirm": {
      "post": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Confirm a pending surveillance activity.",
        "description": "Creates a new surveillance activity, surveilled requirements, and any applicable non-conformities in the system and associates them with the certified product indicated in the request body. If the surveillance is an update of an existing surveillance activity as indicated by the 'surveillanceIdToReplace' field, that existing surveillance activity will be marked as deleted and the surveillance in this request body will be inserted. The surveillance passed into this request will first be validated  to check for errors and the related pending surveillance will be removed. ROLE_ACB_ADMIN or ROLE_ACB_STAFF  and administrative authority on the ACB associated with the certified product is required.",
        "operationId": "confirmPendingSurveillanceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "survToInsert",
            "description": "survToInsert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Surveillance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Surveillance"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/pending/{pendingSurvId}/reject": {
      "post": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Reject (effectively delete) a pending surveillance item.",
        "operationId": "deletePendingSurveillanceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "pendingSurvId",
            "in": "path",
            "description": "pendingSurvId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/update": {
      "post": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Update a surveillance activity for a certified product.",
        "description": "Updates an existing surveillance activity, surveilled requirements, and any applicable non-conformities in the system. The surveillance passed into this request will first be validated  to check for errors. ROLE_ACB_ADMIN or ROLE_ACB_STAFF  and administrative authority on the ACB associated with the certified product is required.",
        "operationId": "updateSurveillanceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "survToUpdate",
            "description": "survToUpdate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Surveillance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Surveillance"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/upload": {
      "post": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Upload a file with surveillance and nonconformities for certified products.",
        "description": "Accepts a CSV file with very specific fields to create pending surveillance items.  The user uploading the file must have ROLE_ACB_ADMIN or ROLE_ACB_STAFF  and administrative authority on the ACB(s) responsible for the product(s) in the file.",
        "operationId": "uploadUsingPOST_2",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveillanceResults"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/{surveillanceId}/delete": {
      "post": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Delete a surveillance activity for a certified product.",
        "description": "Deletes an existing surveillance activity, surveilled requirements, and any applicable non-conformities in the system. ROLE_ACB_ADMIN or ROLE_ACB_STAFF  and administrative authority on the ACB associated with the certified product is required.",
        "operationId": "deleteSurveillanceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "surveillanceId",
            "in": "path",
            "description": "surveillanceId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/{surveillanceId}/nonconformity/{nonconformityId}/document/create": {
      "post": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Add documentation to an existing nonconformity.",
        "description": "Upload a file of any kind (current size limit 5MB) as supporting  documentation to an existing nonconformity. The logged in user uploading the file  must have either ROLE_ADMIN or ROLE_ACB_ADMIN and administrative  authority on the associated ACB.",
        "operationId": "uploadNonconformityDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "surveillanceId",
            "in": "path",
            "description": "surveillanceId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "nonconformityId",
            "in": "path",
            "description": "nonconformityId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/surveillance/{surveillanceId}/nonconformity/{nonconformityId}/document/{docId}/delete": {
      "post": {
        "tags": [
          "surveillance-controller"
        ],
        "summary": "Remove documentation from a nonconformity.",
        "description": "The logged in user must have either ROLE_ADMIN or ROLE_ACB_ADMIN and administrative  authority on the associated ACB.",
        "operationId": "deleteNonconformityDocumentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "surveillanceId",
            "in": "path",
            "description": "surveillanceId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "nonconformityId",
            "in": "path",
            "description": "nonconformityId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "docId",
            "in": "path",
            "description": "docId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "View users of the system.",
        "description": "Only ROLE_ADMIN will be able to see all users.",
        "operationId": "getUsersUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserListJSONObject"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/authorize": {
      "post": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "Update an existing user account with new permissions.",
        "description": "Adds all permissions from the invitation identified by the user key to the appropriate existing user account.The correct order to call invitation requests is the following: 1) /invite 2) /create or /authorize 3) /confirm ",
        "operationId": "authorizeUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "description": "credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizeCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/confirm": {
      "post": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "Confirm that a user's email address is valid.",
        "description": "When a new user accepts their invitation to the CHPL they have to provide an email address. They then receive an email prompting them to confirm that this email address is valid. Confirming the email address must be done via this request before the user will be allowed to log in with the credentials they selected. The correct order to call invitation requests is the following: 1) /invite 2) /create or /authorize 3) /confirm ",
        "operationId": "confirmUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "hash",
            "description": "hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "Create a new user account from an invitation.",
        "description": "An individual who has been invited to the CHPL has a special user key in their invitation email. That user key along with all the information needed to create a new user's account can be passed in here. The account is created but cannot be used until that user confirms that their email address is valid. The correct order to call invitation requests is the following: 1) /invite 2) /create or /authorize 3) /confirm ",
        "operationId": "createUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userInfo",
            "description": "userInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserFromInvitationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/grant_role": {
      "post": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "Give additional roles to a user.",
        "description": "Users may be given ROLE_ADMIN, ROLE_ACB_ADMIN, ROLE_ACB_STAFF, ROLE_ATL_ADMIN, ROLE_ATL_STAFF, or ROLE_ONC_STAFF roles within the system.",
        "operationId": "grantUserRoleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "grantRoleObj",
            "description": "grantRoleObj",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GrantRoleJSONObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/invite": {
      "post": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "Invite a user to the CHPL.",
        "description": "This request creates an invitation that is sent to the email address provided. The recipient of this invitation can then choose to create a new account or add the permissions contained within the invitation to an exisitng account if they have one. Said another way, an invitation can be used to create or modify CHPL user accounts.The correct order to call invitation requests is the following: 1) /invite 2) /create or /authorize 3) /confirm ",
        "operationId": "inviteUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invitation",
            "description": "invitation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInvitation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserInvitation"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/revoke_role": {
      "post": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "Remove roles previously granted to a user.",
        "description": "Users may be given ROLE_ADMIN, ROLE_ACB_ADMIN, ROLE_ACB_STAFF, ROLE_ATL_ADMIN, ROLE_ATL_STAFF, or ROLE_ONC_STAFF roles within the system.",
        "operationId": "revokeUserRoleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "grantRoleObj",
            "description": "grantRoleObj",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GrantRoleJSONObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/update": {
      "post": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "Modify user information.",
        "operationId": "updateUserDetailsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userInfo",
            "description": "userInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/{userId}/delete": {
      "post": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "Delete a user.",
        "description": "Deletes a user account and all associated authorities on ACBs and ATLs. The logged in user must have ROLE_ADMIN.",
        "operationId": "deleteUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/{userName}/details": {
      "get": {
        "tags": [
          "user-management-controller"
        ],
        "summary": "View a specific user's details.",
        "description": "The logged in user must either be the user in the parameters, have ROLE_ADMIN, or have ROLE_ACB_ADMIN.",
        "operationId": "getUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "userName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserInfoJSONObject"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/versions/": {
      "get": {
        "tags": [
          "product-version-controller"
        ],
        "summary": "List all versions.",
        "description": "List all versions associated with a specific product.",
        "operationId": "getVersionsByProductUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "productId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductVersion"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/versions/update": {
      "post": {
        "tags": [
          "product-version-controller"
        ],
        "summary": "Update a version or merge versions.",
        "description": "This method serves two purposes: to update a single version's information and to merge two versions into one.  A user of this service should pass in a single versionId to update just that version.  If multiple version IDs are passed in, the service performs a merge meaning that a new version  is created with all of the information provided and all of the certified products  previously assigned to the old versionIds are reassigned to the newly created version. The  old versions are then deleted.  The logged in user must have ROLE_ADMIN, ROLE_ACB_ADMIN, or ROLE_ACB_STAFF. ",
        "operationId": "updateVersionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "versionInfo",
            "description": "versionInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVersionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductVersion"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/versions/{versionId}": {
      "get": {
        "tags": [
          "product-version-controller"
        ],
        "summary": "Get information about a specific version.",
        "operationId": "getProductVersionByIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductVersion"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "BasicSearchResponse": {
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertifiedProductSearchResult"
          }
        }
      }
    },
    "Address": {
      "properties": {
        "addressId": {
          "type": "integer",
          "format": "int64"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zipcode": {
          "type": "string"
        }
      }
    },
    "PendingCertifiedProductResults": {
      "properties": {
        "pendingCertifiedProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingCertifiedProductDetails"
          }
        }
      }
    },
    "CertificationCriterion": {
      "properties": {
        "certificationEdition": {
          "type": "string"
        },
        "certificationEditionId": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "number": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "SurveillanceNonconformityDocument": {
      "properties": {
        "fileContents": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Product": {
      "properties": {
        "lastModifiedDate": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Developer"
        },
        "ownerHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOwner"
          }
        },
        "productId": {
          "type": "integer",
          "format": "int64"
        },
        "reportFileLocation": {
          "type": "string"
        }
      }
    },
    "Developer": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "deleted": {
          "type": "boolean"
        },
        "developerCode": {
          "type": "string"
        },
        "developerId": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedDate": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/DeveloperStatus"
        },
        "transparencyAttestations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransparencyAttestationMap"
          }
        },
        "website": {
          "type": "string"
        }
      }
    },
    "JsonNode": {
      "properties": {
        "array": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "binary": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "containerNode": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "float": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "null": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "object": {
          "type": "boolean"
        },
        "pojo": {
          "type": "boolean"
        },
        "short": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        }
      }
    },
    "CertificationIdResults": {
      "properties": {
        "ehrCertificationId": {
          "type": "string"
        },
        "isValid": {
          "type": "boolean"
        },
        "metCounts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "metPercentages": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "year": {
          "type": "string"
        }
      }
    },
    "CQMResultCertification": {
      "properties": {
        "certificationId": {
          "type": "integer",
          "format": "int64"
        },
        "certificationNumber": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CertifiedProductSearchDetails": {
      "properties": {
        "acbCertificationId": {
          "type": "string"
        },
        "accessibilityCertified": {
          "type": "boolean"
        },
        "accessibilityStandards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertifiedProductAccessibilityStandard"
          }
        },
        "certificationDate": {
          "type": "integer",
          "format": "int64"
        },
        "certificationEdition": {
          "type": "object"
        },
        "certificationEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationStatusEvent"
          }
        },
        "certificationResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResult"
          }
        },
        "certificationStatus": {
          "type": "object"
        },
        "certifyingBody": {
          "type": "object"
        },
        "chplProductNumber": {
          "type": "string"
        },
        "classificationType": {
          "type": "object"
        },
        "countCerts": {
          "type": "integer",
          "format": "int32"
        },
        "countClosedNonconformities": {
          "type": "integer",
          "format": "int32"
        },
        "countClosedSurveillance": {
          "type": "integer",
          "format": "int32"
        },
        "countCqms": {
          "type": "integer",
          "format": "int32"
        },
        "countOpenNonconformities": {
          "type": "integer",
          "format": "int32"
        },
        "countOpenSurveillance": {
          "type": "integer",
          "format": "int32"
        },
        "countSurveillance": {
          "type": "integer",
          "format": "int32"
        },
        "cqmResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CQMResultDetails"
          }
        },
        "decertificationDate": {
          "type": "integer",
          "format": "int64"
        },
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ics": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedDate": {
          "type": "integer",
          "format": "int64"
        },
        "numMeaningfulUse": {
          "type": "integer",
          "format": "int64"
        },
        "otherAcb": {
          "type": "string"
        },
        "practiceType": {
          "type": "object"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "productAdditionalSoftware": {
          "type": "string"
        },
        "qmsStandards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertifiedProductQmsStandard"
          }
        },
        "reportFileLocation": {
          "type": "string"
        },
        "sedIntendedUserDescription": {
          "type": "string"
        },
        "sedReportFileLocation": {
          "type": "string"
        },
        "sedTestingEnd": {
          "type": "string",
          "format": "date-time"
        },
        "surveillance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Surveillance"
          }
        },
        "targetedUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertifiedProductTargetedUser"
          }
        },
        "testingLab": {
          "type": "object"
        },
        "transparencyAttestation": {
          "type": "string"
        },
        "transparencyAttestationUrl": {
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/ProductVersion"
        },
        "warningMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdatePasswordRequest": {
      "properties": {
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      }
    },
    "CertificationIdLookupResults": {
      "properties": {
        "cqms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "criteria": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ehrCertificationId": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "year": {
          "type": "string"
        }
      }
    },
    "TransparencyAttestationMap": {
      "properties": {
        "acbId": {
          "type": "integer",
          "format": "int64"
        },
        "acbName": {
          "type": "string"
        },
        "attestation": {
          "type": "string"
        }
      }
    },
    "CertificationResultTestParticipant": {
      "properties": {
        "ageRange": {
          "type": "string"
        },
        "ageRangeId": {
          "type": "integer",
          "format": "int64"
        },
        "assistiveTechnologyNeeds": {
          "type": "string"
        },
        "computerExperienceMonths": {
          "type": "integer",
          "format": "int32"
        },
        "educationTypeId": {
          "type": "integer",
          "format": "int64"
        },
        "educationTypeName": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "occupation": {
          "type": "string"
        },
        "productExperienceMonths": {
          "type": "integer",
          "format": "int32"
        },
        "professionalExperienceMonths": {
          "type": "integer",
          "format": "int32"
        },
        "testParticipantId": {
          "type": "integer",
          "format": "int64"
        },
        "uniqueId": {
          "type": "string"
        }
      }
    },
    "CertificationResultTestTask": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "taskErrors": {
          "type": "number",
          "format": "float"
        },
        "taskErrorsStddev": {
          "type": "number",
          "format": "float"
        },
        "taskPathDeviationObserved": {
          "type": "integer",
          "format": "int32"
        },
        "taskPathDeviationOptimal": {
          "type": "integer",
          "format": "int32"
        },
        "taskRating": {
          "type": "number",
          "format": "float"
        },
        "taskRatingScale": {
          "type": "string"
        },
        "taskRatingStddev": {
          "type": "number",
          "format": "float"
        },
        "taskSuccessAverage": {
          "type": "number",
          "format": "float"
        },
        "taskSuccessStddev": {
          "type": "number",
          "format": "float"
        },
        "taskTimeAvg": {
          "type": "integer",
          "format": "int64"
        },
        "taskTimeDeviationObservedAvg": {
          "type": "integer",
          "format": "int32"
        },
        "taskTimeDeviationOptimalAvg": {
          "type": "integer",
          "format": "int32"
        },
        "taskTimeStddev": {
          "type": "integer",
          "format": "int32"
        },
        "testParticipants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResultTestParticipant"
          }
        },
        "testTaskId": {
          "type": "integer",
          "format": "int64"
        },
        "uniqueId": {
          "type": "string"
        }
      }
    },
    "DeveloperStatus": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "CertificationResultAdditionalSoftware": {
      "properties": {
        "certificationResultId": {
          "type": "integer",
          "format": "int64"
        },
        "certifiedProductId": {
          "type": "integer",
          "format": "int64"
        },
        "certifiedProductNumber": {
          "type": "string"
        },
        "grouping": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "justification": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Map«string,int»": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Integer"
      }
    },
    "DescriptiveModel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Statuses": {
      "properties": {
        "active": {
          "type": "integer",
          "format": "int32"
        },
        "retired": {
          "type": "integer",
          "format": "int32"
        },
        "suspendedByAcb": {
          "type": "integer",
          "format": "int32"
        },
        "suspendedByOnc": {
          "type": "integer",
          "format": "int32"
        },
        "terminatedByOnc": {
          "type": "integer",
          "format": "int32"
        },
        "withdrawnByAcb": {
          "type": "integer",
          "format": "int32"
        },
        "withdrawnByDeveloper": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CreateUserFromInvitationRequest": {
      "properties": {
        "hash": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserCreationJSONObject"
        }
      }
    },
    "SurveillanceNonconformityStatus": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ProductOwner": {
      "properties": {
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "transferDate": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UpdateVersionsRequest": {
      "properties": {
        "newProductId": {
          "type": "integer",
          "format": "int64"
        },
        "version": {
          "$ref": "#/definitions/ProductVersion"
        },
        "versionIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "ApiKey": {
      "properties": {
        "email": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Announcement": {
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "boolean"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isPublic": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedUser": {
          "type": "integer",
          "format": "int64"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "PopulateSearchOptions": {
      "properties": {
        "certBodyNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModel"
          }
        },
        "certificationCriterionNumbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DescriptiveModel"
          }
        },
        "certificationStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModel"
          }
        },
        "cqmCriterionNumbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DescriptiveModel"
          }
        },
        "developerNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModelStatuses"
          }
        },
        "editions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModel"
          }
        },
        "practiceTypeNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModel"
          }
        },
        "productClassifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModel"
          }
        },
        "productNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModelStatuses"
          }
        }
      }
    },
    "UserListJSONObject": {
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInfoJSONObject"
          }
        }
      }
    },
    "MeaningfulUseUser": {
      "properties": {
        "certifiedProductId": {
          "type": "integer",
          "format": "int64"
        },
        "csvLineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "error": {
          "type": "string"
        },
        "numberOfUsers": {
          "type": "integer",
          "format": "int64"
        },
        "productNumber": {
          "type": "string"
        }
      }
    },
    "CertificationResultTestTool": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "retired": {
          "type": "boolean"
        },
        "testToolId": {
          "type": "integer",
          "format": "int64"
        },
        "testToolName": {
          "type": "string"
        },
        "testToolVersion": {
          "type": "string"
        }
      }
    },
    "SurveillanceResults": {
      "properties": {
        "pendingSurveillance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Surveillance"
          }
        }
      }
    },
    "MeaningfulUseUserResults": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeaningfulUseUser"
          }
        },
        "meaningfulUseUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeaningfulUseUser"
          }
        }
      }
    },
    "UserActivity": {
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityEvent"
          }
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "ProductVersion": {
      "properties": {
        "details": {
          "type": "string"
        },
        "lastModifiedDate": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "versionId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PermittedUserResults": {
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermittedUser"
          }
        }
      }
    },
    "CertificationResultTestData": {
      "properties": {
        "alteration": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "CertificationResultTestStandard": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "testStandardDescription": {
          "type": "string"
        },
        "testStandardId": {
          "type": "integer",
          "format": "int64"
        },
        "testStandardName": {
          "type": "string"
        }
      }
    },
    "CorrectiveActionPlanResults": {
      "properties": {
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CorrectiveActionPlanDetails"
          }
        }
      }
    },
    "AuthorizeCredentials": {
      "properties": {
        "hash": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "CertificationResultUcdProcess": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "ucdProcessDetails": {
          "type": "string"
        },
        "ucdProcessId": {
          "type": "integer",
          "format": "int64"
        },
        "ucdProcessName": {
          "type": "string"
        }
      }
    },
    "PendingCertifiedProductDetails": {
      "properties": {
        "acbCertificationId": {
          "type": "string"
        },
        "accessibilityCertified": {
          "type": "boolean"
        },
        "accessibilityStandards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertifiedProductAccessibilityStandard"
          }
        },
        "certificationDate": {
          "type": "integer",
          "format": "int64"
        },
        "certificationEdition": {
          "type": "object"
        },
        "certificationEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationStatusEvent"
          }
        },
        "certificationResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResult"
          }
        },
        "certificationStatus": {
          "type": "object"
        },
        "certifyingBody": {
          "type": "object"
        },
        "chplProductNumber": {
          "type": "string"
        },
        "classificationType": {
          "type": "object"
        },
        "countCerts": {
          "type": "integer",
          "format": "int32"
        },
        "countClosedNonconformities": {
          "type": "integer",
          "format": "int32"
        },
        "countClosedSurveillance": {
          "type": "integer",
          "format": "int32"
        },
        "countCqms": {
          "type": "integer",
          "format": "int32"
        },
        "countOpenNonconformities": {
          "type": "integer",
          "format": "int32"
        },
        "countOpenSurveillance": {
          "type": "integer",
          "format": "int32"
        },
        "countSurveillance": {
          "type": "integer",
          "format": "int32"
        },
        "cqmResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CQMResultDetails"
          }
        },
        "decertificationDate": {
          "type": "integer",
          "format": "int64"
        },
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ics": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedDate": {
          "type": "integer",
          "format": "int64"
        },
        "numMeaningfulUse": {
          "type": "integer",
          "format": "int64"
        },
        "otherAcb": {
          "type": "string"
        },
        "practiceType": {
          "type": "object"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "productAdditionalSoftware": {
          "type": "string"
        },
        "qmsStandards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertifiedProductQmsStandard"
          }
        },
        "recordStatus": {
          "type": "string"
        },
        "reportFileLocation": {
          "type": "string"
        },
        "sedIntendedUserDescription": {
          "type": "string"
        },
        "sedReportFileLocation": {
          "type": "string"
        },
        "sedTestingEnd": {
          "type": "string",
          "format": "date-time"
        },
        "surveillance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Surveillance"
          }
        },
        "targetedUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertifiedProductTargetedUser"
          }
        },
        "testingLab": {
          "type": "object"
        },
        "transparencyAttestation": {
          "type": "string"
        },
        "transparencyAttestationUrl": {
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/ProductVersion"
        },
        "warningMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiKeyRegistration": {
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CertificationResultTestFunctionality": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "testFunctionalityId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GrantRoleJSONObject": {
      "properties": {
        "role": {
          "type": "string"
        },
        "subjectName": {
          "type": "string"
        }
      }
    },
    "CertifiedProductQmsStandard": {
      "properties": {
        "applicableCriteria": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "qmsModification": {
          "type": "string"
        },
        "qmsStandardId": {
          "type": "integer",
          "format": "int64"
        },
        "qmsStandardName": {
          "type": "string"
        }
      }
    },
    "PermittedUser": {
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "UpdateProductsRequest": {
      "properties": {
        "newDeveloperId": {
          "type": "integer",
          "format": "int64"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "productIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "CorrectiveActionPlanCertificationResult": {
      "properties": {
        "acbSummary": {
          "type": "string"
        },
        "certificationCriterionId": {
          "type": "integer",
          "format": "int64"
        },
        "certificationCriterionNumber": {
          "type": "string"
        },
        "certificationCriterionTitle": {
          "type": "string"
        },
        "developerSummary": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "resolution": {
          "type": "string"
        },
        "surveillancePassRate": {
          "type": "integer",
          "format": "int32"
        },
        "surveillanceSitesSurveilled": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AnnouncementResults": {
      "properties": {
        "announcements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Announcement"
          }
        }
      }
    },
    "TestingLab": {
      "properties": {
        "accredidationNumber": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "atlCode": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "website": {
          "type": "string"
        }
      }
    },
    "CertificationStatusEvent": {
      "properties": {
        "certificationStatusId": {
          "type": "integer",
          "format": "int64"
        },
        "certificationStatusName": {
          "type": "string"
        },
        "eventDate": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedDate": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedUser": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CertificationCriterionDTO": {
      "properties": {
        "automatedMeasureCapable": {
          "type": "boolean"
        },
        "automatedNumeratorCapable": {
          "type": "boolean"
        },
        "certificationEdition": {
          "type": "string"
        },
        "certificationEditionId": {
          "type": "integer",
          "format": "int64"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedUser": {
          "type": "integer",
          "format": "int64"
        },
        "number": {
          "type": "string"
        },
        "requiresSed": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MacraMeasure": {
      "properties": {
        "abbreviation": {
          "type": "string"
        },
        "criteria": {
          "$ref": "#/definitions/CertificationCriterion"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CorrectiveActionPlanCertificationResultDTO": {
      "properties": {
        "certCriterion": {
          "$ref": "#/definitions/CertificationCriterionDTO"
        },
        "correctiveActionPlanId": {
          "type": "integer",
          "format": "int64"
        },
        "developerExplanation": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "numSitesPassed": {
          "type": "integer",
          "format": "int32"
        },
        "numSitesTotal": {
          "type": "integer",
          "format": "int32"
        },
        "resolution": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        }
      }
    },
    "DeveloperResults": {
      "properties": {
        "developers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Developer"
          }
        }
      }
    },
    "LoginCredentials": {
      "properties": {
        "password": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "UserInvitation": {
      "properties": {
        "acbId": {
          "type": "integer",
          "format": "int64"
        },
        "emailAddress": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "testingLabId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CertifiedProduct": {
      "properties": {
        "chplProductNumber": {
          "type": "string"
        },
        "edition": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedDate": {
          "type": "string"
        }
      }
    },
    "ProductResults": {
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        }
      }
    },
    "SurveillanceResultType": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SurveillanceRequirement": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "nonconformities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SurveillanceNonconformity"
          }
        },
        "requirement": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/SurveillanceResultType"
        },
        "type": {
          "$ref": "#/definitions/SurveillanceRequirementType"
        }
      }
    },
    "CertificationResult": {
      "properties": {
        "additionalSoftware": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResultAdditionalSoftware"
          }
        },
        "allowedMacraMeasures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MacraMeasure"
          }
        },
        "apiDocumentation": {
          "type": "string"
        },
        "g1MacraMeasures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MacraMeasure"
          }
        },
        "g1Success": {
          "type": "boolean"
        },
        "g2MacraMeasures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MacraMeasure"
          }
        },
        "g2Success": {
          "type": "boolean"
        },
        "gap": {
          "type": "boolean"
        },
        "number": {
          "type": "string"
        },
        "privacySecurityFramework": {
          "type": "string"
        },
        "sed": {
          "type": "boolean"
        },
        "success": {
          "type": "boolean"
        },
        "testDataUsed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResultTestData"
          }
        },
        "testFunctionality": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResultTestFunctionality"
          }
        },
        "testProcedures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResultTestProcedure"
          }
        },
        "testStandards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResultTestStandard"
          }
        },
        "testTasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResultTestTask"
          }
        },
        "testToolsUsed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResultTestTool"
          }
        },
        "title": {
          "type": "string"
        },
        "ucdProcesses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationResultUcdProcess"
          }
        }
      }
    },
    "CQMResultDetails": {
      "properties": {
        "allVersions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cmsId": {
          "type": "string"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CQMResultCertification"
          }
        },
        "description": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "nqfNumber": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "successVersions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "typeId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CorrectiveActionPlanDocumentation": {
      "properties": {
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SearchResponse": {
      "properties": {
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "recordCount": {
          "type": "integer",
          "format": "int32"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertifiedProductSearchResult"
          }
        }
      }
    },
    "CertificationBody": {
      "properties": {
        "acbCode": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "website": {
          "type": "string"
        }
      }
    },
    "UserInfoJSONObject": {
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "SearchOption": {
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModel"
          }
        },
        "expandable": {
          "type": "boolean"
        }
      }
    },
    "SurveillanceNonconformity": {
      "properties": {
        "capApprovalDate": {
          "type": "string",
          "format": "date-time"
        },
        "capEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "capMustCompleteDate": {
          "type": "string",
          "format": "date-time"
        },
        "capStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "dateOfDetermination": {
          "type": "string",
          "format": "date-time"
        },
        "developerExplanation": {
          "type": "string"
        },
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SurveillanceNonconformityDocument"
          }
        },
        "findings": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "nonconformityType": {
          "type": "string"
        },
        "resolution": {
          "type": "string"
        },
        "sitesPassed": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "$ref": "#/definitions/SurveillanceNonconformityStatus"
        },
        "summary": {
          "type": "string"
        },
        "totalSites": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Surveillance": {
      "properties": {
        "certifiedProduct": {
          "$ref": "#/definitions/CertifiedProduct"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "friendlyId": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "randomizedSitesUsed": {
          "type": "integer",
          "format": "int32"
        },
        "requirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SurveillanceRequirement"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "surveillanceIdToReplace": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/SurveillanceType"
        }
      }
    },
    "TestingLabResults": {
      "properties": {
        "atls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestingLab"
          }
        }
      }
    },
    "DecertifiedDeveloperResult": {
      "properties": {
        "certifyingBody": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationBody"
          }
        },
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "estimatedUsers": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CorrectiveActionPlanDocumentationDTO": {
      "properties": {
        "correctiveActionPlanId": {
          "type": "integer",
          "format": "int64"
        },
        "fileData": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SearchRequest": {
      "properties": {
        "certificationBodies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "certificationCriteria": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "certificationDateEnd": {
          "type": "string"
        },
        "certificationDateStart": {
          "type": "string"
        },
        "certificationEditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "certificationStatuses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cqms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "developer": {
          "type": "string"
        },
        "hasHadSurveillance": {
          "type": "boolean"
        },
        "orderBy": {
          "type": "string"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "practiceType": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "searchTerm": {
          "type": "string"
        },
        "sortDescending": {
          "type": "boolean"
        },
        "surveillance": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "OPEN_SURVEILLANCE",
              "CLOSED_SURVEILLANCE",
              "OPEN_NONCONFORMITY",
              "CLOSED_NONCONFORMITY"
            ]
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "User": {
      "properties": {
        "accountEnabled": {
          "type": "boolean"
        },
        "accountLocked": {
          "type": "boolean"
        },
        "complianceTermsAccepted": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "subjectName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ActivityEvent": {
      "properties": {
        "activityDate": {
          "type": "string",
          "format": "date-time"
        },
        "activityObjectId": {
          "type": "integer",
          "format": "int64"
        },
        "concept": {
          "type": "string",
          "enum": [
            "ACTIVITY_CONCEPT_CERTIFIED_PRODUCT",
            "ACTIVITY_CONCEPT_PRODUCT",
            "ACTIVITY_CONCEPT_DEVELOPER",
            "ACTIVITY_CONCEPT_CERTIFICATION",
            "ACTIVITY_CONCEPT_CQM",
            "ACTIVITY_CONCEPT_CERTIFICATION_BODY",
            "ACTIVITY_CONCEPT_VERSION",
            "ACTIVITY_CONCEPT_USER",
            "ACTIVITY_CONCEPT_ATL",
            "ACTIVITY_CONCEPT_PENDING_CERTIFIED_PRODUCT",
            "ACTIVITY_CONCEPT_API_KEY",
            "ACTIVITY_CONCEPT_ANNOUNCEMENT",
            "ACTIVITY_CONCEPT_CERTIFICATIONID"
          ]
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "newData": {
          "$ref": "#/definitions/JsonNode"
        },
        "originalData": {
          "$ref": "#/definitions/JsonNode"
        },
        "responsibleUser": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "CertificationIdVerificationBody": {
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiKeyActivity": {
      "properties": {
        "apiCallPath": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "apiKeyId": {
          "type": "integer",
          "format": "int64"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SurveillanceType": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SurveillanceRequirementOptions": {
      "properties": {
        "criteriaOptions2014": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModel"
          }
        },
        "criteriaOptions2015": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueModel"
          }
        },
        "transparencyOptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CertificationResultTestProcedure": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "testProcedureId": {
          "type": "integer",
          "format": "int64"
        },
        "testProcedureVersion": {
          "type": "string"
        }
      }
    },
    "UpdateUserAndAtlRequest": {
      "properties": {
        "atlId": {
          "type": "integer",
          "format": "int64"
        },
        "authority": {
          "type": "string",
          "enum": [
            "READ",
            "DELETE",
            "ADMIN"
          ]
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "KeyValueModelStatuses": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "statuses": {
          "$ref": "#/definitions/Statuses"
        }
      }
    },
    "UpdateUserAndAcbRequest": {
      "properties": {
        "acbId": {
          "type": "integer",
          "format": "int64"
        },
        "authority": {
          "type": "string",
          "enum": [
            "READ",
            "DELETE",
            "ADMIN"
          ]
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserCreationJSONObject": {
      "properties": {
        "complianceTermsAccepted": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "subjectName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CertificationIdVerifyResults": {
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerifyResult"
          }
        }
      }
    },
    "UpdateDevelopersRequest": {
      "properties": {
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "developerIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "CorrectiveActionPlanDetails": {
      "properties": {
        "acbName": {
          "type": "string"
        },
        "acbSummary": {
          "type": "string"
        },
        "actualCompletionDate": {
          "type": "string",
          "format": "date-time"
        },
        "approvalDate": {
          "type": "string",
          "format": "date-time"
        },
        "certificationDtos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CorrectiveActionPlanCertificationResultDTO"
          }
        },
        "certifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CorrectiveActionPlanCertificationResult"
          }
        },
        "certifiedProductId": {
          "type": "integer",
          "format": "int64"
        },
        "developerSummary": {
          "type": "string"
        },
        "documentation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CorrectiveActionPlanDocumentation"
          }
        },
        "documentationDtos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CorrectiveActionPlanDocumentationDTO"
          }
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "estimatedCompletionDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "noncomplianceDate": {
          "type": "string",
          "format": "date-time"
        },
        "randomizedSurveillance": {
          "type": "boolean"
        },
        "resolution": {
          "type": "string"
        },
        "surveillanceEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "surveillanceStartDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "The details about a corrective action plan. If resolved, all fields are required."
    },
    "CertifiedProductTargetedUser": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "targetedUserId": {
          "type": "integer",
          "format": "int64"
        },
        "targetedUserName": {
          "type": "string"
        }
      }
    },
    "UserResetPasswordJSONObject": {
      "properties": {
        "email": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "SurveillanceRequirementType": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Contact": {
      "properties": {
        "contactId": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "SimpleCertificationId": {
      "properties": {
        "certificationId": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CertifiedProductSearchResult": {
      "properties": {
        "acb": {
          "type": "string"
        },
        "acbCertificationId": {
          "type": "string"
        },
        "accessibilityCertified": {
          "type": "boolean"
        },
        "atl": {
          "type": "string"
        },
        "certificationDate": {
          "type": "integer",
          "format": "int64"
        },
        "certificationEdition": {
          "type": "object"
        },
        "certificationStatus": {
          "type": "object"
        },
        "certifyingBody": {
          "type": "object"
        },
        "chplProductNumber": {
          "type": "string"
        },
        "classificationType": {
          "type": "object"
        },
        "countCerts": {
          "type": "integer",
          "format": "int32"
        },
        "countClosedNonconformities": {
          "type": "integer",
          "format": "int32"
        },
        "countClosedSurveillance": {
          "type": "integer",
          "format": "int32"
        },
        "countCqms": {
          "type": "integer",
          "format": "int32"
        },
        "countOpenNonconformities": {
          "type": "integer",
          "format": "int32"
        },
        "countOpenSurveillance": {
          "type": "integer",
          "format": "int32"
        },
        "countSurveillance": {
          "type": "integer",
          "format": "int32"
        },
        "decertificationDate": {
          "type": "integer",
          "format": "int64"
        },
        "developer": {
          "type": "object"
        },
        "edition": {
          "type": "string"
        },
        "hasClosedNonconformities": {
          "type": "boolean"
        },
        "hasClosedSurveillance": {
          "type": "boolean"
        },
        "hasOpenNonconformities": {
          "type": "boolean"
        },
        "hasOpenSurveillance": {
          "type": "boolean"
        },
        "ics": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "numMeaningfulUse": {
          "type": "integer",
          "format": "int64"
        },
        "otherAcb": {
          "type": "string"
        },
        "practiceType": {
          "type": "object"
        },
        "product": {
          "type": "object"
        },
        "productAdditionalSoftware": {
          "type": "string"
        },
        "qmsTesting": {
          "type": "boolean"
        },
        "reportFileLocation": {
          "type": "string"
        },
        "sedIntendedUserDescription": {
          "type": "string"
        },
        "sedReportFileLocation": {
          "type": "string"
        },
        "sedTesting": {
          "type": "boolean"
        },
        "sedTestingEnd": {
          "type": "string",
          "format": "date-time"
        },
        "testingLabId": {
          "type": "integer",
          "format": "int64"
        },
        "testingLabName": {
          "type": "string"
        },
        "transparencyAttestation": {
          "type": "string"
        },
        "transparencyAttestationUrl": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "CertificationBodyResults": {
      "properties": {
        "acbs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationBody"
          }
        }
      }
    },
    "DecertifiedDeveloperResults": {
      "properties": {
        "decertifiedDeveloperResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DecertifiedDeveloperResult"
          }
        }
      }
    },
    "CertifiedProductAccessibilityStandard": {
      "properties": {
        "accessibilityStandardId": {
          "type": "integer",
          "format": "int64"
        },
        "accessibilityStandardName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "KeyValueModel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "VerifyResult": {
      "properties": {
        "id": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      }
    }
  }
}